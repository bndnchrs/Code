% Ocean Init
% this function initializes the ocean component of the FSTD model


if ~isfield(OCEAN,'Hml')
    
    OCEAN.Hml = 100; % Mixed Layer Depth of the ocean
    
end

if ~isfield(OCEAN,'S')
    
    OCEAN.S = 33; % Mixed Layer Salinity in psu
    
end

if ~isfield(OCEAN,'lambda_ll')
    % The restoring timescale to deep ocean values
    OCEAN.lambda_ll = 7*86400; 

end

if ~isfield(OCEAN,'T')
    
    OCEAN.T = -1; % Mixed Layer Temp
    
end


if ~isfield(OCEAN,'Tfrz')
    
    OCEAN.Tfrz = -1.8; % Freezing Temperature of seawater
    
end

if ~isfield(OCEAN,'ustar_oceice')
    
    OCEAN.ustar_oceice = 1e-4; % m/s. Ice-ocean roughness velocity
    
end

if ~isfield(OCEAN,'cp_w')
    
    OCEAN.cp_w = 4185; % Specific Heat Capacity of Water (J/kg K)
    
end

if ~isfield(OCEAN,'alpha_T')
    
    OCEAN.alpha_T = 2e-4; % 1/deg C Thermal expansion coeff of seawater
    
end

if ~isfield(OCEAN,'beta_S')
    
    OCEAN.beta_S = 7.4e-4; % 1/psu Haline contraction coeff of seawater
    
end

if ~isfield(OCEAN,'T_0')
    OCEAN.T_0 = 0; % Deg C Reference Temperature for linear EOS
end

if ~isfield(OCEAN,'S_0')
    OCEAN.S_0 = 32; % ppt Reference Salinity for linear EOS
end

if ~isfield(OCEAN,'no_oi_hf')
    % We calculate a heat flux between the ocean and the ice using a
    % turbulent velocity exchange parameterization (with u^*). If we don't 
    % 
    OCEAN.no_oi_hf = 0; 
end

if ~isfield(OCEAN,'taui')
    OCEAN.taui = .5*86400; % Relaxation timescale of ice temperature
end

if ~isfield(OCEAN,'StrainInvar') && MECH.DO && ~ADVECT.DO
    % The ocean strain rate tensor, 2 by nt long
    OCEAN.StrainInvar = zeros(2,OPTS.nt); 
end

if ~isfield(OCEAN,'vel') && ADVECT.DO
    % The ocean strain rate tensor, 2 by nt long
    OCEAN.vel = zeros(2,OPTS.nt);  
end

if ~isfield(OCEAN,'shear') && ADVECT.DO

    OCEAN.shear = zeros(1,OPTS.nt);     
    
end



if ~isfield(OCEAN,'EOS')
    OCEAN.EOS = @(T,S) OCEAN.rho_w * (1 - OCEAN.alpha_T * (T - OCEAN.T_0) ...
        + OCEAN.beta_S * ( S - OCEAN.S_0));  
end